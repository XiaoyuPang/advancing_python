简介：
    实体和实体之间有4种对应关系(1:1,1:多，多：多),这些关系也是一种数据，也要存储下来。
    在开发中需要对存储的数据进行一些处理，用到内置的一些函数。
    视图用于完成查询语句的封装。
    事务可以保证复杂的增删改查。
    
关系：
    假设有a和b两个实体，当：
        a对b为一对一：关系字段存在a或b都可以。
        a对b为一对多：关系字段存在b表里。
        a对b为多对多：新建一张表用于存储关系。
          
    外键：
        如何保证数据的有效性？ 可以通过外键约束进行数据的有效性验证。
        创建外键：
            foreign key(外键的字段名） references 关联的表名(关联的字段名，一般为id)
        外键的级联操作：
            当表的某数据被其他表引用时，对表的某个字段删除会抛出异常，解决办法：
                1 推荐使用逻辑删除，还可以解决这个问题。
                2 创建表时指定级联操作，也可以在创建表后再修改外键的级联操作
                    级联操作的类型包括：
                        restrict（限制）： 默认值，抛异常。
                        cascade（级联）：如果主键的记录被删掉，则从表中相关联的记录都将被删除。
                        set null：将外键设置为空
                        no action：什么都不做

连接查询：inner/left/right join ..on
    当需要对有关系的多张表进行查询时，需要使用连接join
    例子：
        有3张表 students，scores，subjects,其中外键都在scores表中。我们想查看例如“ 李四 数学 100”这样的数据：
            select students.name, subject.title, scores.score 
            from scores 
            inner join students on scores.stuid=students.id     #外键的关联字段
            inner join subjects on scores.subid=subjects.id;    #外键的关联字段
        
            #tips：1.明确要查看的字段 2.找到表和表的外键关系 3.构建sql查询语句
        
        表a inner join表b：表a与表b匹配的行会出现在结果中 —— 即表中关系的数据匹配才出现，不匹配不出现。
        表a left join 表b：表a与表b匹配的行会出现在结果中，外加表a中独有的数据，未对应的数据使用null填充
        表a right join表b：表a与表b匹配的行会出现在结果中，外加表b中独有的数据，未对应的数据使用null填充

自关联：
    当一张表（比如省份）的信息量较少时，可以将两张关联的表合成一张，这就用到自关联。
    自关联是在一张表里，外键引用的是自身的一个关联字段，如pid和id都是表students的字段：
        foreign key(pid) references students(id);
        
视图：
    对于复杂的查询，在多次使用后，维护很麻烦。视图的本质是对查询的一个封装，下次使用调用就可以了。 
    语法：
        create view 视图名 as + sql查询语句；
    语句执行完会生成一个名称为视图名的表，查看的时候，以查看表的语句查看就好了。  
    
事务：
    当一个业务逻辑需要多个sql语句，如果某个出错，希望整个操作都退回。事务可以完成退回功能，保证业务逻辑的正确性。
    事物的四大特性：
        原子性：事务中的全部操作在数据库中都是不可分割的，要么全部执行，要么不执行。
        一致性：几个并行执行的任务，其执行结果必须与按某以顺序串行执行的结果一致。
        隔离性：事务的执行不受其他事物的干扰，事务的执行的中间结果对其他事务必须是透明的。
        持久性：对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障。
    要求：表的类型必须是innodb或bdb类型，才可以对此表使用事务。
    语句：
        begin：开始事务
        commit：提交事务
        rollback：放弃事务
    注：事务的用途是针对会改变表结构的sql语句，查询类sql语句没必要使用事务。
    
索引：
    查询索引：
        show index from 表名； #默认的索引是id
    创建索引：
          create index 索引名 on 表名(字段名(长度））；
    删除索引：
        drop index [索引名] on 表名；
    缺点：
        虽然索引大大提高了查询速度，同时会降低更新表的速度。因为更新表时，mysql不仅要保存数据，还要保存一下索引文件。
    
    检测索引效率：
        1.set profiling=1；
        2.查询语句
        3.show profiles；
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                          
                        
