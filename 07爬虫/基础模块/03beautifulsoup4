BeautifulSoup ：灵活又方便使用的网页解析器

网页由html的众多标签组成，因此解析网页分为两步：
    1：精准定位到标签 (那么如何精确定位标签呢：依靠标签名和标签属性值)
    2：从标签提取内容（内容一般存储在两个位置中：标签内容和标签属性值，比如<p ><a href="www.douban.com">豆瓣电影</a></p>）

    BeautifulSoup分为三部分：1.标签选择器、css选择器、标准选择器（结合了1和2）



[例子]
import requests
import lxml
from bs4 import BeautifulSoup as bs

response = requests.get(url)
response.encoding = 'utf-8'
html = bs(response,'lxml')

[标签选择器]  --（只会返回一个，如p标签有多个，只返回第一个）
    选择元素： html.p
    提取标签内容：html.p.a.text           #提取标签内容(假如有:<p ><a href="www.douban.com">豆瓣电影</a></p>)
    提取标签属性值：html.p.a['href']      #提取href属性值
       

    子节点和子孙节点：
        子节点：html.p.contents -->return list （或者html.p.children ，与contents不同在于return iterator）
        子孙节点：html.p.descendants -->return list

    父节点和祖先节点：
        父节点：html.a.parent
        祖先节点：html.a.parents

    兄弟节点：
        html.a.next_siblings(后面的)
        html.a.previous_siblings(前面的)
    

[css选择器](通过select()方法，return list)
    html.select('.css_class .other_class')  #类 class选择器
    html.select('#only_id')     #id选择器
    html.select('ul li p  a)    #也可以用css选择器筛选标签

    获取属性：
        html.select('ul')['id']     或者 html.select('ul').attrs['id']
    获取内容：
        html.select('ul').get_text()

[标准选择器]
    主要有find() 和 find_all(),find返回一个，因此整个beautifulsoup要重点掌握的只有find_all ,返回list
    find_all:
        html.find_all('p')  #返回所有p标签
        html.find_all(attrs={'id':'only_id'})   #查找标签中css的id为only_id的标签
        html.find_all('p',attrs={'class':re.compile("^h")})    #还可以使用正则匹配
        html.find_all('p',attrs={'class':True})    #含有class属性的p标签即可


总结：
    整个beautifulsoup其实只要重点掌握find_all()
    


文章：
    BeautifulSoup全面总结： https://zhuanlan.zhihu.com/p/35354532   
