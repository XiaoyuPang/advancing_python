类当装饰器：
	__call__(self)方法：类像函数一样直接调用，需要实现__call__(self)方法
	用类当装饰器，实际是__init__(self）完成装饰的初始化，被装饰的函数调用__call__(self)方法。

元类：
	实例对象是由class创建的，class是由type创建的，type是个元类（最原始的创建类的东西，可以说元类就是类的类,元类由元类创建）
		用type创建一个类的方法： myclass = type('类名',(父类,),{'属性':vlaue}) ，a = myclass()
		myclass.__class__返回type，type.__class__返回type。
		
	__metaclass__属性：设置定义的类的元类 :__metaclass__ = 函数名 
	
垃圾回收：（引用计数为主，分代回收为辅）
	小整数对象池：Python里一切是对象，对象的实例化为赋值的过程，赋值实际上是引用，引用对象又分为可变和不可变对象。
		int是不可变对象，但Python里[-5,257)这些整数对象是用之前已经提前创建好的。常驻内存。
		目的：为了避免整数的频繁销毁和申请内存空间。
	大整数对象池：每个大整数都会创建一个新对象
	intern机制：类似一个共享机制，字符串是不可变类型，在Python里字符串中若无空格（即单字符串），即便有多份也只是引用，若字符串中含有空格，
		则新建一份，像这种只用一份的的机制叫intern机制
	
	
	引用计数，是Python解决垃圾回收的一个主要机制，当引用为零则Python解释器自动回收内存。
		优点：简单
		缺点：解决不了循环引用
		
	分代回收（generation gc）：python使用三种链表来追踪活跃的对象，当引用计数达到某种程度时触发引用计数减一。
		0代链表（generation zero）：所有新创建的对象都会添加到0代链表，一般引用计数为1。
		1代链表： Python判断0代链表有循环引用的对象的计数减1，计数不为0且没有循环引用的活跃对象被移到一个新的链表：1代链表，
			引用计数为0的对象被回收，因此处理了引用计数为1的循环引用，多引用计数的循环引用被 减一后继续留在0代。
		2代链表：1代链表引用计数减1，计数不为0的活跃对象被移到2代链表。
		
		垃圾回收模块gc：gc.get_count(),gc.get_threshold(),gc.disable(),
		3中情况触发垃圾回收：1.调用gc.collect(),2.gc模块计数值达到阀值 ，3.程序退出
		
内建属性：
	__init__,__new__,__str__,__repr__,__del__,等等
	__getattribute__:相当于属性拦截器。当在类里面定义了getattribute方法，访问属性时吹触发调用getattribute方法，
		属性被当做参数被传入__getattribute__方法。作用：比如可以打印log日志。getattribute里不许调用self.xxx，
		
内建函数：
	range，map，filter，reduce，sorted
	
	range: python3里只有range，Python2里range是一个list，xrange是一个生成器。
	map：	map函数会根据提供的函数对指定序列做映射：	map(function,sequence),如map(lambda x:x*x , [1,2,3])	返回[1,4,9]。
	filter：		filter函数会对指定序列执行过滤操作：filter(lambda x:x%2,[1,2,3,4])返回[1,3] 因为非0为True，1为False。
	reduce：		reduce函数会对参数序列中元素进行累积：reduce(lambda x, y: x+y, [1,2,3,4] 返回10。
	sorted：		a = [1,3,2,5],	a.sort()和sorted(a)是一样的，相比sort，sorted能直接传入iterable进行排序。
	
集合：set
	集合用大括号{}表示
functools：
	partial函数(偏函数)：把一个函数的某些参数设置默认值，返回一个新的函数，调用这个新函数会更简单。
	
	wraps函数：使用装饰器时，有一些细节需要被注意。例如，被装饰后的函数其实已经是另外一个函数了（函数名等函数属性会发生改变）。
	
	
pdb调试：
	python -m pdb xxx.py
	调试的一些指令：http://www.aiexp.me/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/03day/section.3.html	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
	
	
	
	
	
	
