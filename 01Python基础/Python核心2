(0).迭代器
iterable：
	可直接作用于for循环的数据类型称为可迭代对象(iterable),本质上是该对象实现了__iter__()方法
	共有两种：
	1.数据集合类型：如list，tuple，dict，set和str等
	2.generator：生成器、带yield功能的generator function
	【判断是否为iterable：from collections import iterable 然后 isinstance(xxx,iterable) 】
iterator：
	可以被next()函数调用，不断返回下一个值的对象称为迭代器（iterator），本质上是实现了__next__()方法的iterable
	比如，生成器有__next__()功能所以是迭代器，list、tuple等没有实现__next__()功能就不是
	结论：迭代器一定是可迭代对象，可迭代对象不一定是迭代器，迭代器每次调用只返回一个值，因此比list等省内存
	【判断是否为iterator：首先from collections import iterator ,然后  isinstance(xxx,iterator) 】
	把iterable转化成iterator：  iter(xxx)
	
总结： iterable --> __iter__()
	  iterator --> __iter__() + __next__() ,如生成器就是同时实现了这两个方法
	  
(1).闭包
概念：
	在函数a内部def一个函数b，并且b用到了a的变量，a函数 return b函数
应用：
	把函数a执行后得到的数据输出，作为b的输入。闭包是函数式编程的一个重要语法结构，装饰器就是闭包的应用

(2)装饰器
应用：
	装饰器是Python的一种语法糖，实际是闭包，应用是在不改变代码的前提下添加功能，比如django的@login验证。
	
注意：python执行到@的时候就开始自动装饰了，即使还没有调用

(3)应用域
	
	LEGB: local-->enclosing function(内嵌函数，闭包常见）-->global -->building
	在Python的函数里若变量名与全局变量名相同，则会隐藏全局变量名。若想在函数里修改全局变量名，在函数里用关键字：global。
	
(4)python的动态特性
应用： 
	代码运行时添加额外功能，比如为类添加方法和属性，

__slots__:
	因为Python能在运行时动态的添加属性，为了限制，__slots__用于限制该class实例能添加的属性
	
	
(5)生成器
两种方式构造生成器：1.（x  for x in range(xxx)) 2.使用yield关键字

注意：
	在函数里面使用yield之后，函数就不仅仅是一个函数，而是变成了生成器，直接调用函数不会被执行，应该实例化后再用next()调用，实例化生成器需要加括号
	重点：yield在函数里的执行顺序，send()相当于yield的第一次执行










