JS的引入：  实现用户与页面的交互

js的引入方式有三种：
    js是对DOM的操作，所以一般在body后面引入，而不是head中。
    1：行间引入
        <input type="button" name="" onclick="alert('ok');">
    2.页面script引入
        <script type="text/javascript">
            var = '你好';
            alert(a);
        </script>
    3.外部引入
        <script type="text/javascript" src="xxxx路径"><script>
注释： 
    // 单行注释
    /*  多行
        注释
    */

变量：
    5种基本变量类型：number、string、boolean、undefined、null
    1种复合类型：object
    
    作用域：定义在函数内部就是局部变量，函数外部就是全局变量
    
获取元素的方法之一：
     var my_id = document.getElementById('div1');
     上面这个语句如果是在id之前就会报错，因为程序是从上往下执行的。所以一般把js语句在页面最后引入
     
操作元素属性：
    1.“.” 操作          
    2.“[ ]”操作

函数：
    function 函数名{
        var xxx；
        xxxx；
    }        

定义数组：   var my_aarray = new Array(1,2,3); //对象的实例创建
            var my_list = [1,2,3,4];    //直接量创建
        
    
js的组成：  
    1.ECMAscript JavaScript的语法（变量、函数、循环语句等）
    2.DOM文档对象模型 操作html和css的方法
    3.BOM浏览器对象模型 操作浏览器的一些方法
   
调试程序的方法：
    1.alert
    2.console.log
    3.document.title

定时器类型及语法：
    setTimeout //只执行一次的定时器
    clearTimeout //关闭只执行一次的定时器
    setInterval //反复执行的定时器
    clearInterval //关闭反复执行的定时器

闭包：
    函数嵌套函数，内部函数可以应用外部函数的参数和变量，参数和变量不会被垃圾回收机制回收。
    
内置函数：
    1.document
        document.referrer //获取上一个跳转页面的地址（需要服务器环境)
    2.location
        window.location.href //获取或者重定url地址
        window.location.search //获取地址参数部分
        window.location.hash //获取页面锚点或者叫哈希值
    3.Math
        Mach.random  //获取0-1的随机数
        Math.floor //向下取整
        Math.cell //向上取整
    
面向对象：
    将相关的变量和函数组合成一个整体，这个整体就叫对象，对象中的变量叫属性，对象中的函数叫方法。
    <script type="text/javascript">
    
    function Person(name,age,job){
        var o = new Object();
        o.name = name;
        o.age = age;
        o.job = job;
        
        o.shownmae = function(){
            alert('我的名字'+ this.name);
            
        };
        
        return o;
    }

    var tom = Person('tom',18,'程序员')；
    tom.showname();
   </script>
   
选择器：
    1.document.querySlector()
    2.document.querySlectorAll()
      

























   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
